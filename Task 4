import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

df=pd.read_csv("spam.csv",encoding='latin-1')
df.describe()
df.info()
missing_values = df.isnull().sum()
print(missing_values)

X = df['v2']
y = df['v1']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

from sklearn.naive_bayes import MultinomialNB
def evaluate_model(model, X_test_tfidf, y_test):
    y_pred = model.predict(X_test_tfidf)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    return accuracy, report


print("Naive Bayes:")
nb_accuracy, nb_report = evaluate_model(nb_model, X_test_tfidf, y_test)
print("Accuracy:", nb_accuracy)
print(nb_report)

from sklearn.svm import SVC
svm_model = SVC(kernel='linear')
svm_model.fit(X_train_tfidf, y_train)

print("\nSupport Vector Machine:")
svm_accuracy, svm_report = evaluate_model(svm_model, X_test_tfidf, y_test)
print("Accuracy:", svm_accuracy)
print(svm_report)

accuracies = [nb_accuracy, svm_accuracy]
models = ['Naive Bayes', 'Support Vector Machine']

plt.bar(models, accuracies, color=['blue', 'green'])
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Comparison of Naive Bayes and Support Vector Machine')
plt.show()
